{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\musim\\\\Desktop\\\\ALX\\\\EdAI\\\\edai\\\\src\\\\components\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport sendSvg from '../send-svg.png';\nimport audioSvg from '../audio-svg.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatWindow() {\n  _s();\n  const [isTyping, setIsTyping] = useState(false);\n  const [userInput, setUserInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const handleTyping = () => {\n    setIsTyping(true);\n  };\n  const handleBlur = () => {\n    setIsTyping(false);\n  };\n  const handleSubmit = async () => {\n    if (!userInput.trim()) {\n      return; // Don't submit if user input is empty or only whitespace\n    }\n\n    try {\n      setIsLoading(true);\n\n      // Make the API request\n      const response = await fetch('/api/chatbot/<str:prompt>', {\n        method: 'POST',\n        body: JSON.stringify({\n          request: userInput\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Check if the request was successful\n      if (response.ok) {\n        const data = await response.json();\n        const apiFeedback = data.feedback;\n        setFeedback(apiFeedback);\n        setUserInput(''); // Clear the input field\n      } else {\n        console.error('API request failed:', response.status);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const getWindowStyle = () => {\n    if (isLoading) {\n      return {\n        height: 'auto',\n        maxHeight: '100px'\n      };\n    }\n    if (isTyping) {\n      return {\n        width: '40%',\n        height: '200px'\n      };\n    } else {\n      return {\n        width: '20%px',\n        height: '50px'\n      };\n    }\n  };\n  const chatbotContent = () => {\n    if (isLoading) {\n      return {\n        display: '',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        padding: '0 10px',\n        overflowY: 'auto',\n        zIndex: '40'\n      };\n    }\n    return {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      height: '100%',\n      padding: '0 10px',\n      overflowY: 'auto',\n      zIndex: '40'\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-window\",\n    style: getWindowStyle(),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: chatbotContent(),\n      className: \"chatbot-content-old\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"chatbot-input\",\n        placeholder: \"Type here or press and hold the mic button to speak to me ;-)\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onFocus: handleTyping,\n        onBlur: handleBlur,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chatbot-options\",\n        id: \"typing-option\",\n        onClick: handleSubmit,\n        disabled: isLoading,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"button-img\",\n          src: sendSvg,\n          alt: \"Send Icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chatbot-options\",\n        id: \"audio-option\",\n        disabled: isLoading,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"button-img\",\n          src: audioSvg,\n          alt: \"Audio Icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          display: 'block'\n        },\n        className: \"chatbot-feedback\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chatbot-feedback\",\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 7\n  }, this);\n}\n_s(ChatWindow, \"ubt43y9XHud4OpgJcSpsQfI/7BE=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","sendSvg","audioSvg","jsxDEV","_jsxDEV","ChatWindow","_s","isTyping","setIsTyping","userInput","setUserInput","feedback","setFeedback","isLoading","setIsLoading","handleTyping","handleBlur","handleSubmit","trim","response","fetch","method","body","JSON","stringify","request","headers","ok","data","json","apiFeedback","console","error","status","getWindowStyle","height","maxHeight","width","chatbotContent","display","justifyContent","alignItems","padding","overflowY","zIndex","className","style","children","type","placeholder","value","onChange","e","target","onFocus","onBlur","disabled","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/musim/Desktop/ALX/EdAI/edai/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport sendSvg from '../send-svg.png';\r\nimport audioSvg from '../audio-svg.png';\r\n\r\nfunction ChatWindow() {\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const [userInput, setUserInput] = useState('');\r\n    const [feedback, setFeedback] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n  \r\n    const handleTyping = () => {\r\n      setIsTyping(true);\r\n    };\r\n  \r\n    const handleBlur = () => {\r\n      setIsTyping(false);\r\n    };\r\n  \r\n    const handleSubmit = async () => {\r\n      if (!userInput.trim()) {\r\n        return; // Don't submit if user input is empty or only whitespace\r\n      }\r\n  \r\n      try {\r\n        setIsLoading(true);\r\n  \r\n        // Make the API request\r\n        const response = await fetch('/api/chatbot/<str:prompt>', {\r\n          method: 'POST',\r\n          body: JSON.stringify({ request: userInput }),\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n  \r\n        // Check if the request was successful\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          const apiFeedback = data.feedback;\r\n  \r\n          setFeedback(apiFeedback);\r\n          setUserInput(''); // Clear the input field\r\n        } else {\r\n          console.error('API request failed:', response.status);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n  \r\n    const getWindowStyle = () => {\r\n      if (isLoading) {\r\n        return {\r\n          height: 'auto',\r\n          maxHeight: '100px'\r\n        }\r\n      }\r\n      if (isTyping) {\r\n        return {\r\n          width: '40%',\r\n          height: '200px',\r\n        };\r\n      } else {\r\n        return {\r\n          width: '20%px',\r\n          height: '50px',\r\n        };\r\n      }\r\n    };\r\n\r\n    const chatbotContent = () => {\r\n      if (isLoading) {\r\n        return {\r\n          display: '',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          padding: '0 10px',\r\n          overflowY: 'auto',\r\n          zIndex: '40',\r\n        }\r\n      }\r\n      return {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        height: '100%',\r\n        padding: '0 10px',\r\n        overflowY: 'auto',\r\n        zIndex: '40',\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <div className=\"chatbot-window\" style={getWindowStyle()}>\r\n        <div style={chatbotContent()} className=\"chatbot-content-old\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"chatbot-input\"\r\n            placeholder=\"Type here or press and hold the mic button to speak to me ;-)\"\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n            onFocus={handleTyping}\r\n            onBlur={handleBlur}\r\n            disabled={isLoading}\r\n          />\r\n          <button className=\"chatbot-options\" id=\"typing-option\" onClick={handleSubmit} disabled={isLoading}>\r\n            <img className='button-img' src={sendSvg} alt='Send Icon'/>\r\n          </button>\r\n          <button className=\"chatbot-options\" id=\"audio-option\" disabled={isLoading}>\r\n            <img className='button-img' src={audioSvg} alt='Audio Icon'/>\r\n          </button>\r\n          <br/>\r\n          {isLoading ? (\r\n            <p style={{display: 'block'}} className=\"chatbot-feedback\">Loading...</p>\r\n          ) : (\r\n            <p className=\"chatbot-feedback\">{feedback}</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default ChatWindow;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}